/tic-tac-toe
  - index.html
  - game.html
  - styles.css
  - script.js
  - background-music.mp3
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home - Tic-Tac-Toe</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body class="home-page">
    <div class="logo-container">
        <div class="logo">
            <span class="cross">X</span>
            <span class="zero">O</span>
            <span class="cross">X</span>
        </div>
        <h1 class="game-title">Tic-Tac-Toe</h1>
        <button onclick="location.href='game.html'">Play Game</button>
    </div>
</body>
</html>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tic-Tac-Toe Game</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div id="login-options">
        <button onclick="alert('Google login not implemented')">Login with Google</button>
        <button onclick="alert('Facebook login not implemented')">Login with Facebook</button>
        <button onclick="alert('Instagram login not implemented')">Login with Instagram</button>
    </div>
    <div id="game">
        <div id="menu">
            <div class="dots" onclick="toggleMenu()">â‹®</div>
            <div id="menu-content" class="menu-content">
                <input type="text" id="name-input" placeholder="Enter your name">
                <button onclick="setName()">Submit</button>
                <button id="share-screen">Share Screen</button>
            </div>
        </div>
        <div id="status"></div>
        <div id="board">
            <div class="cell" data-index="0"></div>
            <div class="cell" data-index="1"></div>
            <div class="cell" data-index="2"></div>
            <div class="cell" data-index="3"></div>
            <div class="cell" data-index="4"></div>
            <div class="cell" data-index="5"></div>
            <div class="cell" data-index="6"></div>
            <div class="cell" data-index="7"></div>
            <div class="cell" data-index="8"></div>
        </div>
        <button id="restart">Restart</button>
    </div>
    <audio id="background-music" loop>
        <source src="background-music.mp3" type="audio/mpeg">
        Your browser does not support the audio element.
    </audio>
    <script src="script.js"></script>
</body>
</html>
/* Common styles */
body {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    font-family: Arial, sans-serif;
    background-color: blue;
    color: white;
    margin: 0;
    overflow: hidden;
}

button {
    padding: 10px 20px;
    font-size: 1rem;
    cursor: pointer;
}

/* Home page styles */
.home-page {
    flex-direction: column;
    text-align: center;
}

.logo-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
}

.logo {
    display: flex;
    gap: 10px;
    font-size: 5rem;
    font-weight: bold;
    color: red;
    text-shadow: 2px 2px 5px black;
}

.game-title {
    font-size: 3rem;
    color: white;
}

/* Game page styles */
#login-options {
    position: absolute;
    left: 10px;
    top: 10px;
    display: flex;
    flex-direction: column;
}

#login-options button {
    margin-bottom: 10px;
}

#game {
    text-align: center;
    position: relative;
}

#menu {
    position: absolute;
    top: 10px;
    right: 10px;
}

.dots {
    cursor: pointer;
    font-size: 1.5rem;
}

.menu-content {
    display: none;
    flex-direction: column;
    background-color: white;
    color: black;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    position: absolute;
    top: 20px;
    right: 0;
}

.menu-content input {
    margin-bottom: 10px;
    padding: 5px;
}

#board {
    display: grid;
    grid-template-columns: repeat(3, 100px);
    grid-template-rows: repeat(3, 100px);
    gap: 5px;
    margin-bottom: 20px;
}

.cell {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100px;
    height: 100px;
    font-size: 2rem;
    background-color: #f0f0f0;
    border: 2px solid #ccc;
    cursor: pointer;
    color: red;
}

.cell:hover {
    background-color: #e0e0e0;
}

#status {
    margin-bottom: 20px;
    font-size: 1.2rem;
}

#restart {
    padding: 10px 20px;
}

.balloon {
    position: absolute;
    bottom: -50px;
    width: 20px;
    height: 30px;
    background-color: red;
    border-radius: 10px;
    animation: rise 5s infinite ease-in-out;
}

@keyframes rise {
    0% {
        bottom: -50px;
        transform: translateX(0);
    }
    100% {
        bottom: 100%;
        transform: translateX(calc(100vw - 50%));
    }
}
const cells = document.querySelectorAll('.cell');
const statusText = document.getElementById('status');
const restartButton = document.getElementById('restart');
const menuContent = document.getElementById('menu-content');
const nameInput = document.getElementById('name-input');
const backgroundMusic = document.getElementById('background-music');
const shareScreenButton = document.getElementById('share-screen');
let currentPlayer = 'X';
let gameState = ["", "", "", "", "", "", "", "", ""];
let gameActive = true;
let playerName = '';

const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

const winningMessage = () => `${playerName || 'Player'} ${currentPlayer} has won!`;
const drawMessage = () => `Game ended in a draw!`;
const currentPlayerTurn = () => `It's ${playerName || 'Player'} ${currentPlayer}'s turn`;

statusText.innerHTML = currentPlayerTurn();

cells.forEach(cell => cell.addEventListener('click', handleCellClick));
restartButton.addEventListener('click', handleRestartGame);
backgroundMusic.play();

shareScreenButton.addEventListener('click', shareScreen);

function handleCellClick(clickedCellEvent) {
    const clickedCell = clickedCellEvent.target;
    const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

    if (gameState[clickedCellIndex] !== "" || !gameActive) {
        return;
    }

    gameState[clickedCellIndex] = currentPlayer;
    clickedCell.innerHTML = currentPlayer;

    handleResultValidation();
}

function handleResultValidation() {
    let roundWon = false;
    for (let i = 0; i < winningConditions.length; i++) {
        const winCondition = winningConditions[i];
        let a = gameState[winCondition[0]];
        let b = gameState[winCondition[1]];
        let c = gameState[winCondition[2]];
        if (a === '' || b === '' || c === '') {
            continue;
        }
        if (a === b && b === c) {
            roundWon = true;
            break;
        }
    }

    if (roundWon) {
        statusText.innerHTML = winningMessage();
        gameActive = false;
        popBalloons();
        return;
    }

    let roundDraw = !gameState.includes("");
    if (roundDraw) {
        statusText.innerHTML = drawMessage();
        gameActive = false;
        return;
    }

    handlePlayerChange();
}

function handlePlayerChange() {
    currentPlayer = currentPlayer === "X" ?
const cells = document.querySelectorAll('.cell');
const statusText = document.getElementById('status');
const restartButton = document.getElementById('restart');
const menuContent = document.getElementById('menu-content');
const nameInput = document.getElementById('name-input');
const backgroundMusic = document.getElementById('background-music');
const shareScreenButton = document.getElementById('share-screen');
let currentPlayer = 'X';
let gameState = ["", "", "", "", "", "", "", "", ""];
let gameActive = true;
let playerName = '';

const winningConditions = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6]
];

const winningMessage = () => `${playerName || 'Player'} ${currentPlayer} has won!`;
const drawMessage = () => `Game ended in a draw!`;
const currentPlayerTurn = () => `It's ${playerName || 'Player'} ${currentPlayer}'s turn`;

statusText.innerHTML = currentPlayerTurn();

cells.forEach(cell => cell.addEventListener('click', handleCellClick));
restartButton.addEventListener('click', handleRestartGame);
backgroundMusic.play();

shareScreenButton.addEventListener('click', shareScreen);

function handleCellClick(clickedCellEvent) {
    const clickedCell = clickedCellEvent.target;
    const clickedCellIndex = parseInt(clickedCell.getAttribute('data-index'));

    if (gameState[clickedCellIndex] !== "" || !gameActive) {
        return;
    }

    gameState[clickedCellIndex] = currentPlayer;
    clickedCell.innerHTML = currentPlayer;

    handleResultValidation();
}

function handleResultValidation() {
    let roundWon = false;
    for (let i = 0; i < winningConditions.length; i++) {
        const winCondition = winningConditions[i];
        let a = gameState[winCondition[0]];
        let b = gameState[winCondition[1]];
        let c = gameState[winCondition[2]];
        if (a === '' || b === '' || c === '') {
            continue;
        }
        if (a === b && b === c) {
            roundWon = true;
            break;
        }
    }

    if (roundWon) {
        statusText.innerHTML = winningMessage();
        gameActive = false;
        popBalloons();
        return;
    }

    let roundDraw = !gameState.includes("");
    if (roundDraw) {
        statusText.innerHTML = drawMessage();
        gameActive = false;
        return;
    }

    handlePlayerChange();
}

function handlePlayerChange() {
    currentPlayer = currentPlayer === "X" ?

